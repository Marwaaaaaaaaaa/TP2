#include <stdio.h>
#include <stdlib.h>

typedef struct noeud{
int valeur;
struct noeud*suivant;
}noeud;

noeud*cree(int val){
noeud*nv;
nv=(noeud*)malloc(sizeof(noeud));
nv->suivant=null;
nv->valeur=val;
return nv;}

void afficher (noeud*debut){
noeud*ptr=debut;
if(ptr==null){
printf("la liste est vide");
}else{
    while(ptr!=null);
    printf("la valeur est:%d",ptr->val);
    ptr=ptr->suivant;
     }}


noeud*ajouterdebut(noeud*debut,int val){
noeud*nv=cree(val);

    nv->suivant=debut;
    debut=nv;

   return debut;
     }}

noeud*ajouterfin(noeud*debut,int val){
    noeud*nv,ptr;
    nv=(noeud*)malloc(sizeof(noeud));
    nv->suivant=null;
    nv->valeur=val;
    while(ptr->suivant=null)
    ptr=ptr->suivant;
    ptr->suivant=nv;
return debut;}


noeud*listetaille(noeud*debut){
int taille=0;
noeud*ptr=debut;

while(ptr!=null){
    taille++;
    ptr=ptr->suivant;}
    return taille;
    }

    noeud*insertion(Noeud*debut,int pos,int _valeur);
    int taille=listetaille(debut);
    if(pos<1||pos>taille+1){
        printf("position invalide");
        free(nv);
    }return debut;

    if (pos==1){
        nv->suivant=debut;
        debut=nv;
        }return debut;

    noeud*ptr=debut;
    for(int i=1;i<pos-1;i++){
        ptr=ptr->suivant;
        nv->suivant=ptr->suivant;
        ptr->suivant=nv;
    } return debut;

    void rechercher(noeud*debut,int _valeur);
    int trouve=0
    ptr=ptr->suivant;
    while(ptr!=null){
            if(ptr->valeur==val);
            trouve=1;
           break;
    }
    ptr=ptr->suivant;
    }
if (trouve==1)
printf("la valeur existe");
else
    printf("la valeur n'existe pas");

    noeud*suppressiondebut(neoud*debut){
    if(tete==null);
    printf("la liste est vide");
    return null;}

    noeud*ptr=debut;
    debut=debut->suivant;
    free(ptr);
    return debut;}

    noeud*suppressionfin(neoud*debut){
    if(debut==null);
    printf("la liste est vide");
    return null;
    }
    neoud*ptr=debut;
    if(debut->suivant==null);
    free(debut);
    while(ptr->suivant->suivant!=null){
    free(ptr->suivant);
    ptr->suivant=null;
    return debut;}

    noeud*suppressionposition(noeud*debut,int pos){
        if(debut==null);
        printf("la liste est vide");
        return null;
        }
        neoud*ptr=debut;



